%!PS-Adobe-3.0
%%BoundingBox: 24 24 588 768
%%Title: enscript output
%%For: George K. Thiruvathukal
%%Creator: GNU enscript 1.4.0
%%CreationDate: Mon Oct  7 12:18:11 2002
%%Orientation: Landscape
%%Pages: (atend)
%%DocumentMedia: Letter 612 792 0 () ()
%%DocumentNeededResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset Enscript-Prolog 1.4 0
%
% Procedures.
%

/_S {	% save current state
  /_s save def
} def
/_R {	% restore from saved state
  _s restore
} def

/S {	% showpage protecting gstate
  gsave
  showpage
  grestore
} bind def

/MF {	% fontname newfontname -> -	make a new encoded font
  /newfontname exch def
  /fontname exch def

  /fontdict fontname findfont def
  /newfont fontdict maxlength dict def

  fontdict {
    exch 
    dup /FID eq {
      % skip FID pair
      pop pop
    } {
      % copy to the new font dictionary
      exch newfont 3 1 roll put
    } ifelse
  } forall
  
  newfont /FontName newfontname put

  % insert only valid encoding vectors
  encoding_vector length 256 eq {
    newfont /Encoding encoding_vector put
  } if
  
  newfontname newfont definefont pop
} def

/M {moveto} bind def
/s {show} bind def

/Box {	% x y w h -> -			define box path
  /d_h exch def /d_w exch def /d_y exch def /d_x exch def
  d_x d_y  moveto 
  d_w 0 rlineto 
  0 d_h rlineto 
  d_w neg 0 rlineto 
  closepath
} def

% Highlight bars.
/highlight_bars {	% nlines lineheight output_y_margin gray -> -
  gsave
    setgray
    /ymarg exch def
    /lineheight exch def
    /nlines exch def

    % This 2 is just a magic number to sync highlight lines to text.
    0 d_header_y ymarg sub 2 sub translate
    
    /cw d_output_w cols div def
    /nrows d_output_h ymarg 2 mul sub lineheight div floor def

    % for each column
    0 1 cols 1 sub {
      cw mul /xp exch def

      % for each rows
      0 1 nrows 1 sub {
        /rn exch def 
        rn lineheight mul neg /yp exch def
        rn nlines idiv 2 mod 0 eq {
	  % Draw highlight bar.  4 is just a magic indentation.
	  xp 4 add yp cw 8 sub lineheight neg Box fill	  
	} if
      } for
    } for
    
  grestore
} def

% Line highlight bar.
/line_highlight {	% x y width height gray -> -
  gsave
    /gray exch def
    Box gray setgray fill
  grestore
} def

% Column separator lines.
/column_lines {
  gsave
    .1 setlinewidth
    0 d_footer_h translate
    /cw d_output_w cols div def
    1 1 cols 1 sub {
      cw mul 0 moveto
      0 d_output_h rlineto stroke
    } for
  grestore
} def

% Column borders.
/column_borders {
  gsave
    .1 setlinewidth
    0 d_footer_h moveto 
    0 d_output_h rlineto
    d_output_w 0 rlineto
    0 d_output_h neg rlineto
    closepath stroke
  grestore
} def

% Do the actual underlay drawing
/draw_underlay {
  ul_style 0 eq {
    ul_str true charpath stroke
  } { 
    ul_str show
  } ifelse
} def

% Underlay
/underlay {	% - -> -
  gsave
    0 d_page_h translate
    d_page_h neg d_page_w atan rotate

    ul_gray setgray
    ul_font setfont
    /dw d_page_h dup mul d_page_w dup mul add sqrt def
    ul_str stringwidth pop dw exch sub 2 div ul_ptsize -2 div moveto 
    draw_underlay
  grestore
} def

/user_underlay {	% - -> -
  gsave
    ul_x ul_y translate
    ul_angle rotate
    ul_gray setgray
    ul_font setfont 
    0 0 ul_ptsize 2 div sub moveto 
    draw_underlay
  grestore
} def

% Page prefeed
/page_prefeed {		% bool -> -
  statusdict /prefeed known {
    statusdict exch /prefeed exch put
  } {
    pop
  } ifelse
} def

% EPSF import.

/BeginEPSF {
  /b4_Inc_state save def    		% Save state for cleanup
  /dict_count countdictstack def	% Count objects on dict stack
  /op_count count 1 sub def		% Count objects on operand stack 
  userdict begin
  /showpage { } def
  0 setgray 0 setlinecap
  1 setlinewidth 0 setlinejoin
  10 setmiterlimit [ ] 0 setdash newpath
  /languagelevel where {
    pop languagelevel
    1 ne {
      false setstrokeadjust false setoverprint 
    } if
  } if
} bind def

/EndEPSF {
  count op_count sub { pos } repeat	% Clean up stacks
  countdictstack dict_count sub { end } repeat
  b4_Inc_state restore
} bind def

% Check PostScript language level.
/languagelevel where {
  pop /gs_languagelevel languagelevel def
} {
  /gs_languagelevel 1 def
} ifelse
%%EndResource
%%BeginResource: procset Enscript-Encoding-latin1 1.4 0
/encoding_vector [
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/space        	/exclam       	/quotedbl     	/numbersign   	
/dollar       	/percent      	/ampersand    	/quoteright   	
/parenleft    	/parenright   	/asterisk     	/plus         	
/comma        	/minus        	/period       	/slash        	
/zero         	/one          	/two          	/three        	
/four         	/five         	/six          	/seven        	
/eight        	/nine         	/colon        	/semicolon    	
/less         	/equal        	/greater      	/question     	
/at           	/A            	/B            	/C            	
/D            	/E            	/F            	/G            	
/H            	/I            	/J            	/K            	
/L            	/M            	/N            	/O            	
/P            	/Q            	/R            	/S            	
/T            	/U            	/V            	/W            	
/X            	/Y            	/Z            	/bracketleft  	
/backslash    	/bracketright 	/asciicircum  	/underscore   	
/quoteleft    	/a            	/b            	/c            	
/d            	/e            	/f            	/g            	
/h            	/i            	/j            	/k            	
/l            	/m            	/n            	/o            	
/p            	/q            	/r            	/s            	
/t            	/u            	/v            	/w            	
/x            	/y            	/z            	/braceleft    	
/bar          	/braceright   	/tilde        	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/space        	/exclamdown   	/cent         	/sterling     	
/currency     	/yen          	/brokenbar    	/section      	
/dieresis     	/copyright    	/ordfeminine  	/guillemotleft	
/logicalnot   	/hyphen       	/registered   	/macron       	
/degree       	/plusminus    	/twosuperior  	/threesuperior	
/acute        	/mu           	/paragraph    	/bullet       	
/cedilla      	/dotlessi     	/ordmasculine 	/guillemotright	
/onequarter   	/onehalf      	/threequarters	/questiondown 	
/Agrave       	/Aacute       	/Acircumflex  	/Atilde       	
/Adieresis    	/Aring        	/AE           	/Ccedilla     	
/Egrave       	/Eacute       	/Ecircumflex  	/Edieresis    	
/Igrave       	/Iacute       	/Icircumflex  	/Idieresis    	
/Eth          	/Ntilde       	/Ograve       	/Oacute       	
/Ocircumflex  	/Otilde       	/Odieresis    	/multiply     	
/Oslash       	/Ugrave       	/Uacute       	/Ucircumflex  	
/Udieresis    	/Yacute       	/Thorn        	/germandbls   	
/agrave       	/aacute       	/acircumflex  	/atilde       	
/adieresis    	/aring        	/ae           	/ccedilla     	
/egrave       	/eacute       	/ecircumflex  	/edieresis    	
/igrave       	/iacute       	/icircumflex  	/idieresis    	
/eth          	/ntilde       	/ograve       	/oacute       	
/ocircumflex  	/otilde       	/odieresis    	/divide       	
/oslash       	/ugrave       	/uacute       	/ucircumflex  	
/udieresis    	/yacute       	/thorn        	/ydieresis    	
] def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeResource: font Courier-Bold
%%IncludeResource: font Courier
/user_header_p false def
/HFpt 10 def
/Courier-Bold /HF-gs-font MF
/HF /HF-gs-font findfont HFpt scalefont def
/Courier /F-gs-font MF
/F-gs-font findfont 7 scalefont setfont
/#copies 1 def
%%BeginResource: procset Enscript-Header-enscript 1.4 0
%%IncludeResource: font Times-Bold
%%IncludeResource: font Times-Roman

% Fonts.
/Times-Bold /HeaderFont-Bold MF
/HeaderDateF /HeaderFont-Bold findfont 12 scalefont def

/Times-Roman /HeaderFont-Times MF
/HeaderHDRF /HeaderFont-Times findfont 14 scalefont def

/HeaderPageNumF /Helvetica-Bold findfont 28.8 scalefont def

/do_header {	% print enscript header
  gsave
    d_header_x d_header_y translate

    % light bar
    0 0 d_header_w d_header_h 2 div Box
    .95 setgray fill

    % filename
    0 setgray 
    HeaderHDRF setfont
    d_header_w fname stringwidth pop sub 2 div d_header_h 8 div moveto
    fname show

    % user supplied header string.
    user_header_p {
      d_header_w user_header_str stringwidth pop sub 2 div 
      d_header_h 8 div 5 mul moveto user_header_str show
    } if

    % dark gray boxes
    /dbw d_header_h 2 mul def	% dark box width
    /dbc .7 def			% dark box color

    % left dark box.
    0 0 dbw d_header_h Box
    dbc setgray fill

    0 setgray 
    HeaderDateF setfont
    moddatestr dup stringwidth pop dbw exch sub 2 div 
    d_header_h 2 div 2 add moveto show
    modtimestr dup stringwidth pop dbw exch sub 2 div 
    d_header_h 5 div moveto show

    % right dark box
    d_header_w dbw sub 0 dbw d_header_h Box
    dbc setgray fill

    HeaderPageNumF setfont
    1 setgray
    pagenum 10 string cvs dup 
    stringwidth pop dbw exch sub 2 div d_header_w dbw sub add
    d_header_h .2 mul moveto show

  grestore
} def
%%EndResource
/d_page_w 744 def
/d_page_h 564 def
/d_header_x 0 def
/d_header_y 528 def
/d_header_w 744 def
/d_header_h 36 def
/d_footer_x 0 def
/d_footer_y 0 def
/d_footer_w 744 def
/d_footer_h 0 def
/d_output_w 744 def
/d_output_h 528 def
/cols 2 def
%%EndSetup
%%Page: (1) 1
%%BeginPageSetup
_S
90 rotate
24 -588 translate
/pagenum 1 def
/fname (UserStack.py) def
/fdir () def
/ftail (UserStack.py) def
% User defined strings:
/moddatestr (11/13/101) def
/modtimestr (15:55:23) def
%%EndPageSetup
column_lines
do_header
5 518 M
(# ) s
5 510 M
(# Simple Stack Class For Python) s
5 502 M
(# Based on Intrinsic UserList Class) s
5 494 M
(#) s
5 478 M
(from UserList import UserList) s
5 462 M
(class UserStack\(UserList\):) s
5 454 M
(   def __init__\(self, initStack=None\):) s
5 446 M
(      if initStack:) s
5 438 M
(         if isinstance\(initStack, UserList\):) s
5 430 M
(            UserList.__init__\(self, initStack.data\)) s
5 422 M
(         elif type\(initStack\) == type\([]\):) s
5 414 M
(            UserList.__init__\(self, initStack\)) s
5 406 M
(         else:) s
5 398 M
(            raise "[] or UserList Required") s
5 390 M
(      else:) s
5 382 M
(         UserList.__init__\(self\)) s
5 374 M
(   ) s
5 366 M
(   def push\(self, obj\):) s
5 358 M
(      UserList.append\(self,obj\)) s
5 342 M
(   def pop\(self\):) s
5 334 M
(      if len\(self\) > 0:) s
5 326 M
(         return UserList.pop\(self\)) s
5 318 M
(      else:) s
5 310 M
(         raise "UserStack Underflow") s
5 294 M
(   def top\(self\):) s
5 286 M
(      if len\(self\) > 0:) s
5 278 M
(         return self[-1]) s
5 270 M
(      else:) s
5 262 M
(         raise "UserStack Overflow") s
5 246 M
(   def empty\(self\):) s
5 238 M
(      return len\(self\) == 0) s
5 222 M
(   def notEmpty\(self\):) s
5 214 M
(      return not empty\(self\)) s
_R
S
%%Page: (1) 2
%%BeginPageSetup
_S
90 rotate
24 -588 translate
/pagenum 1 def
/fname (outlinetool.py) def
/fdir () def
/ftail (outlinetool.py) def
% User defined strings:
/moddatestr (11/13/101) def
/modtimestr (15:55:24) def
%%EndPageSetup
column_lines
do_header
5 518 M
(import string) s
5 510 M
(import sys) s
5 494 M
(from xml.sax import saxexts) s
5 486 M
(from xml.sax import saxlib) s
5 470 M
(from UserStack import UserStack) s
5 454 M
(class XElement:) s
5 446 M
(    def __init__\(self, name=None, attrs=None\):) s
5 438 M
(        self.name = name) s
5 430 M
(        self.attrs = attrs) s
5 422 M
(        self.children = []) s
5 414 M
(        self.text = '') s
5 398 M
(    def initialize\(self\):) s
5 390 M
(        pass) s
5 374 M
(    def finalize\(self, parent\):) s
5 366 M
(        pass) s
5 350 M
(    def linkTo\(self, element\):) s
5 342 M
(        if isinstance\(element,XElement\):) s
5 334 M
(            self.children.append\(element\)) s
5 318 M
(    def cdata\(self, text\):) s
5 310 M
(        self.text = self.text + text) s
5 294 M
(    def printBFS\(self, depth=0\):) s
5 286 M
(        print " " * depth, str\(self\)) s
5 278 M
(        for node in self.children:) s
5 270 M
(            node.printBFS\(depth+1\)) s
5 254 M
(    def visit\(self, depth\):) s
5 246 M
(        print " " * depth, str\(self\)) s
5 230 M
(    def walkBFS\(self, depth=0\):) s
5 222 M
(        self.doWalkBFS\(depth\)) s
5 206 M
(    def doWalkBFS\(self, depth=0\):) s
5 198 M
(        self.visit\(depth\)) s
5 190 M
(        for node in self.children:) s
5 182 M
(            node.doWalkBFS\(depth+1\)) s
5 166 M
(    def getName\(self\):) s
5 158 M
(        return self.name) s
5 142 M
(    def getText\(self\):) s
5 134 M
(        return self.text) s
5 118 M
(    def getChildren\(self, klass=None\):) s
5 110 M
(        if not klass:) s
5 102 M
(            return self.children[:]) s
5 86 M
(        children = []) s
5 78 M
(        if type\(klass\) == type\(''\):) s
5 70 M
(            for node in self.children:) s
5 62 M
(                if node.__class__.__name__ == klass:) s
5 54 M
(                    children.append\(node\)) s
5 46 M
(        else:) s
5 38 M
(            for node in self.children:) s
5 30 M
(                if isinstance\(node, klass\):) s
5 22 M
(                    children.append\(node\)) s
5 14 M
(        return children) s
377 518 M
(    def __str__\(self\):) s
377 510 M
(        if not self.name:) s
377 502 M
(            attrRep =  '') s
377 494 M
(            repr = '<>') s
377 486 M
(        else:) s
377 478 M
(            attrRep = '') s
377 470 M
(            for n in range\(0,len\(self.attrs\)\):) s
377 462 M
(                attrRep = attrRep + " " + self.attrs.getName\(n\) + "=...") s
377 454 M
(            repr = '<' + self.name + attrRep + '>') s
377 438 M
(        if len\(self.children\) > 0:) s
377 430 M
(            repr = repr + ': ' + `len\(self.children\)` + ' children ' + '<') s
377 422 M
(            sep = '') s
377 414 M
(            for node in self.children:) s
377 406 M
(                repr = repr + sep + node.__class__.__name__ ) s
377 398 M
(                sep = ', ') s
377 390 M
(            repr = repr + '>') s
377 382 M
(        repr = repr + ' text <' + self.text + '>') s
377 374 M
(        return self.__class__.__name__ + ': ' + repr) s
377 358 M
(class XTreeHandler\(saxlib.DocumentHandler\):) s
377 350 M
(    def __init__\(self, **options\):) s
377 342 M
(        self.elems=0) s
377 334 M
(        self.attrs=0) s
377 326 M
(        self.pis=0) s
377 318 M
(        self.contextStack = UserStack\([]\)) s
377 310 M
(        self.contextStack.push\("x"\)) s
377 302 M
(        self.document = XDocumentRoot\(\)) s
377 294 M
(        self.contextStack.push\(self.document\)) s
377 286 M
(        self.elementMap = {}) s
377 278 M
(        self.ignoreWhiteSpace = options.has_key\('IgnoreWhiteSpace'\) \\) s
377 270 M
(          and options['IgnoreWhiteSpace'] in ['true','yes',1,'1']) s
377 262 M
(        self.removeWhiteSpace = options.has_key\('RemoveWhiteSpace'\) \\) s
377 254 M
(          and options['RemoveWhiteSpace'] in ['true','yes',1,'1']) s
377 246 M
(        self.createElementMap = options.has_key\('CreateElementMap'\) \\) s
377 238 M
(          and options['CreateElementMap'] in ['true','yes',1,'1']) s
377 222 M
(    def getElementMap\(self\):) s
377 214 M
(        return self.elementMap) s
377 198 M
(    def startElement\(self, name, attrs\):) s
377 190 M
(        stmt = 'element = ' + name + '\(name,attrs\)') s
377 182 M
(        try:) s
377 174 M
(            exec stmt) s
377 166 M
(        except:) s
377 158 M
(            element = XElement\(name,attrs\)) s
377 142 M
(        if self.createElementMap:) s
377 134 M
(            if not self.elementMap.has_key\(name\):) s
377 126 M
(                self.elementMap[name] = []) s
377 118 M
(            self.elementMap[name].append\(element\)) s
377 102 M
(        element.initialize\(\)) s
377 86 M
(        self.contextStack.top\(\).linkTo\(element\)) s
377 70 M
(        self.contextStack.push\(element\)) s
377 62 M
(        self.elems=self.elems+1) s
377 54 M
(        self.attrs=self.attrs+len\(attrs\)) s
377 38 M
(    def endElement\(self, name\):) s
377 30 M
(        popElement = self.contextStack.pop\(\)) s
377 22 M
(        popElement.finalize\(self.contextStack.top\(\)\)) s
377 6 M
(    def characters\(self, ch, start, length\):) s
_R
S
%%Page: (2) 3
%%BeginPageSetup
_S
90 rotate
24 -588 translate
/pagenum 2 def
/fname (outlinetool.py) def
/fdir () def
/ftail (outlinetool.py) def
% User defined strings:
/moddatestr (11/13/101) def
/modtimestr (15:55:24) def
%%EndPageSetup
column_lines
do_header
5 518 M
(        tos = self.contextStack.top\(\)) s
5 510 M
(        if self.removeWhiteSpace:) s
5 502 M
(            text = ch[start:start+length]) s
5 494 M
(            splitText = string.split\(text\)) s
5 486 M
(            if len\(tos.text\) > 0:) s
5 478 M
(                pad = ' ') s
5 470 M
(            else:) s
5 462 M
(                pad = '') s
5 454 M
(            for item in splitText:) s
5 446 M
(                tos.cdata\(pad + item\)) s
5 438 M
(                pad = ' ') s
5 430 M
(        else:) s
5 422 M
(            tos.cdata\(ch[start:start+length]\)) s
5 406 M
(    def ignorableWhitespace\(self, ch, start, length\):) s
5 398 M
(        print "ignorable ws encountered") s
5 390 M
(        if not self.ignoreWhiteSpace:) s
5 382 M
(            self.contextStack.top\(\).cdata\(ch[start:start+length]\)) s
5 366 M
(    def getDocument\(self\):) s
5 358 M
(        return self.document) s
5 342 M
(    def processingInstruction\(self,target,data\):) s
5 334 M
(        self.pis=self.pis+1) s
5 318 M
(class XDocumentRoot\(XElement\):) s
5 310 M
(    def __init__\(self\):) s
5 302 M
(        XElement.__init__\(self\)) s
5 286 M
(    def endElement\(self\):) s
5 278 M
(        print "Document contains %d elements." % \(len\(self.children\)\)) s
5 262 M
(class Abstract\(XElement\):) s
5 254 M
(    def __init__\(self,name,attrs\):) s
5 246 M
(        XElement.__init__\(self,name,attrs\)) s
5 230 M
(class Outline\(XElement\):) s
5 222 M
(    def __init__\(self,name,attrs\):) s
5 214 M
(        self.allText = '') s
5 206 M
(        XElement.__init__\(self,name,attrs\)) s
5 190 M
(    def getAllText\(self\):) s
5 182 M
(        return self.allText) s
5 166 M
(    def addText\(self, text\):) s
5 158 M
(        if len\(self.allText\):) s
5 150 M
(            self.allText = self.allText + ' ' + text) s
5 142 M
(        else:) s
5 134 M
(            self.allText = text) s
5 118 M
(class Item\(XElement\):) s
5 110 M
(    def __init__\(self,name,attrs\):) s
5 102 M
(        self.allText = '') s
5 94 M
(        XElement.__init__\(self,name,attrs\)) s
5 78 M
(    def addText\(self, text\):) s
5 70 M
(        if len\(self.allText\):) s
5 62 M
(            self.allText = self.allText + ' ' + text) s
5 54 M
(        else:) s
5 46 M
(            self.allText = text) s
5 30 M
(    def finalize\(self, parent\):) s
5 22 M
(        parent.addText\(self.text\)) s
5 6 M
(class Content\(XElement\):) s
377 518 M
(    def __init__\(self,name,attrs\):) s
377 510 M
(        print "creating Content XElement instance") s
377 502 M
(        XElement.__init__\(self,name,attrs\)) s
377 486 M
(class Requires\(XElement\):) s
377 478 M
(    def __init__\(self,name,attrs\):) s
377 470 M
(        XElement.__init__\(self,name,attrs\)) s
377 454 M
(class Uses\(XElement\):) s
377 446 M
(    def __init__\(self,name,attrs\):) s
377 438 M
(        XElement.__init__\(self,name,attrs\)) s
377 422 M
(class Defines\(XElement\):) s
377 414 M
(    def __init__\(self,name,attrs\):) s
377 406 M
(        XElement.__init__\(self,name,attrs\)) s
377 390 M
(class Keywords\(XElement\):) s
377 382 M
(    def __init__\(self,name,attrs\):) s
377 374 M
(        XElement.__init__\(self,name,attrs\)) s
377 358 M
(class Topic\(XElement\):) s
377 350 M
(    def __init__\(self,name,attrs\):) s
377 342 M
(        XElement.__init__\(self,name,attrs\)) s
377 326 M
(    def finalize\(self, parent\):) s
377 318 M
(        self.id = self.attrs.get\('id','none specified'\)) s
377 310 M
(        abstract = self.getChildren\(Abstract\)) s
377 302 M
(        requires = self.getChildren\(Requires\)) s
377 294 M
(        outline = self.getChildren\(Outline\)) s
377 286 M
(        uses = self.getChildren\(Uses\)) s
377 278 M
(        keywords = self.getChildren\(Keywords\)) s
377 262 M
(        if len\(abstract\):) s
377 254 M
(            self.abstract = abstract[0].getText\(\)) s
377 246 M
(        else: self.abstract = '') s
377 230 M
(        if len\(requires\):) s
377 222 M
(            self.requires = string.split\(requires[0].getText\(\)\)) s
377 214 M
(        else: self.requires = []) s
377 198 M
(        if len\(outline\):) s
377 190 M
(            self.words = string.split\(outline[0].getAllText\(\)\)) s
377 182 M
(        else: self.words = '') s
377 166 M
(        if len\(uses\):) s
377 158 M
(            self.uses = string.split\(uses[0].getText\(\)\)) s
377 150 M
(        else: self.uses = []) s
377 134 M
(        if len\(keywords\):) s
377 126 M
(            self.keywords = string.split\(keywords[0].getText\(\)\)) s
377 118 M
(        else: self.keywords = []) s
377 102 M
(    def __str__\(self\):) s
377 94 M
(        return 'Topic %s\\nAbstract\\n%s\\nkeywords\\n%s\\nreq\\n%s\\nuses\\n%s\\nwords used\\n%) s
377 86 M
(s\\n' % \(self.id, self.abstract, `self.keywords`, `self.requires`, `self.uses`, `self.w) s
377 78 M
(ords`\)) s
377 54 M
(def analyzeTopics\(topics\):) s
377 46 M
(    kwMap = {}) s
377 38 M
(    wordMap = {}) s
377 30 M
(    usedMap = {}) s
377 22 M
(    undefMap = {}) s
377 6 M
(    for topic in topics:) s
_R
S
%%Page: (3) 4
%%BeginPageSetup
_S
90 rotate
24 -588 translate
/pagenum 3 def
/fname (outlinetool.py) def
/fdir () def
/ftail (outlinetool.py) def
% User defined strings:
/moddatestr (11/13/101) def
/modtimestr (15:55:24) def
%%EndPageSetup
column_lines
do_header
5 518 M
(        print "* Analyzing Topic %s" % topic.id) s
5 510 M
(        for word in topic.requires:) s
5 502 M
(            print "\\t- %s:" % word) s
5 494 M
(            if kwMap.has_key\(word\):) s
5 486 M
(                print "\\t\\t+ defined in <keyword> section for these topics:") s
5 478 M
(                for whereSeen in kwMap[word]:) s
5 470 M
(                    if whereSeen != topic: print "\\t\\t\\t%s" % whereSeen.id) s
5 462 M
(            else:) s
5 454 M
(                if wordMap.has_key\(word\):) s
5 446 M
(                    print "\\t\\t= not defined but found in <outline> in earlier topic\(s) s
5 438 M
(\):") s
5 430 M
(                    for whereSeen in wordMap[word]:) s
5 422 M
(                        if whereSeen != topic: print "\\t\\t\\t%s" % whereSeen.id) s
5 406 M
(                elif usedMap.has_key\(word\):) s
5 398 M
(                    print "\\t\\t- not defined but found used \(section <used>\) in earlie) s
5 390 M
(r topic\(s\):") s
5 382 M
(                    for whereSeen in usedMap[word]:) s
5 374 M
(                        if whereSeen != topic: print "\\t\\t\\t%s" % whereSeen.id) s
5 358 M
(                elif undefMap.has_key\(word\):) s
5 350 M
(                    print "\\t\\t- already reported undefined for earlier topic\(s\):") s
5 342 M
(                    for whereSeen in undefMap[word]:) s
5 334 M
(                        if whereSeen != topic: print "\\t\\t\\t%s" % whereSeen.id) s
5 326 M
(                else:) s
5 318 M
(                    print "\\t\\t- not found in any preceding topic \(in any section\)") s
5 302 M
(                if not undefMap.has_key\(word\):) s
5 294 M
(                    entry = undefMap[word] = []) s
5 286 M
(                else:) s
5 278 M
(                    entry = undefMap[word]) s
5 270 M
(                entry.append\(topic\)) s
5 254 M
(            print ) s
5 246 M
(        for word in topic.keywords:) s
5 238 M
(            if not kwMap.has_key\(word\):) s
5 230 M
(                entry = kwMap[word] = []) s
5 222 M
(            else:) s
5 214 M
(                entry = kwMap[word]) s
5 206 M
(            entry.append\(topic\)) s
5 198 M
(        for word in topic.words:) s
5 190 M
(            if not wordMap.has_key\(word\):) s
5 182 M
(                entry = wordMap[word] = []) s
5 174 M
(            else:) s
5 166 M
(                entry = wordMap[word]) s
5 158 M
(            entry.append\(topic\)) s
5 142 M
(        for word in topic.uses:) s
5 134 M
(            if not entry:) s
5 126 M
(                entry = usedMap[word] = []) s
5 118 M
(            else:) s
5 110 M
(                entry = usedMap[word]) s
5 102 M
(            entry.append\(topic\)) s
5 78 M
(    print "* All Defined Topics") s
5 70 M
(    for kw in kwMap.keys\(\):) s
5 62 M
(        print "\\t",kw) s
5 46 M
(    print "* All Undefined Topics") s
5 38 M
(    for kw in undefMap.keys\(\):) s
5 30 M
(        print "\\t",kw) s
5 14 M
(    print "* All Used Topics") s
5 6 M
(    for kw in usedMap.keys\(\):) s
377 518 M
(        print "\\t",kw) s
377 502 M
(    print "* Checking for undefined Topics that got defined later:") s
377 494 M
(    print "  each line output is \(missing word, where identified, where defined\)") s
377 486 M
(    for word in kwMap.keys\(\):) s
377 478 M
(        if undefMap.has_key\(word\):) s
377 470 M
(            for topic_i in undefMap[word]:) s
377 462 M
(                for topic_j in kwMap[word]:) s
377 454 M
(                    print "\\t\(%s, %s, %s\)" % \(word, topic_i.id, topic_j.id\)) s
377 446 M
(            del\(undefMap[word]\)) s
377 430 M
(    print "* New List of Undefined Topics"            ) s
377 422 M
(    for kw in undefMap.keys\(\):) s
377 414 M
(        print "\\t",kw) s
377 398 M
(def go\(\):) s
377 390 M
(   if len\(sys.argv\) < 2:) s
377 382 M
(      print "Usage: python saxtree.py <document>") s
377 374 M
(      print) s
377 366 M
(      print " <document>: file name of the document to parse") s
377 358 M
(      sys.exit\(1\)) s
377 342 M
(   p = saxexts.make_parser\(\)) s
377 334 M
(   xth = XTreeHandler\(IgnoreWhiteSpace='yes',RemoveWhiteSpace='yes',CreateElementMap=') s
377 326 M
(yes'\)) s
377 318 M
(   p.setDocumentHandler\(xth\)) s
377 302 M
(   Ok=None) s
377 294 M
(   try:) s
377 286 M
(      p.parse\(sys.argv[1]\)) s
377 278 M
(      print "Parse complete:") s
377 270 M
(      print "  Elements:    %d" % xth.elems) s
377 262 M
(      print "  Attributes:  %d" % xth.attrs) s
377 254 M
(      print "  Proc instrs: %d" % xth.pis) s
377 246 M
(      print "  elements:    %s" % `xth.getElementMap\(\).keys\(\)`) s
377 230 M
(      document = xth.getDocument\(\)) s
377 214 M
(      print "  Document has %d children " % len\(document.getChildren\(\)\)) s
377 206 M
(      content = document.getChildren\('Content'\)) s
377 198 M
(      topics = content[0].getChildren\('Topic'\)) s
377 190 M
(      print "%d content objects" % len\(content\)) s
377 182 M
(      print "%d topic objects" % len\(topics\)) s
377 174 M
(      topics = content[0].getChildren\(Topic\)) s
377 166 M
(      print "%d topic objects" % len\(topics\)) s
377 158 M
(      analyzeTopics\(topics\)) s
377 150 M
(   except IOError,e:) s
377 142 M
(      print "\\nERROR: "+sys.argv[1]+": "+str\(e\)) s
377 134 M
(   except saxlib.SAXException,e:) s
377 126 M
(      print "\\nERROR: "+str\(e\)) s
377 102 M
(# Main Program) s
377 86 M
(if __name__ == '__main__':) s
377 78 M
(   go\(\)) s
_R
S
%%Page: (1) 5
%%BeginPageSetup
_S
90 rotate
24 -588 translate
/pagenum 1 def
/fname (outline.xml) def
/fdir () def
/ftail (outline.xml) def
% User defined strings:
/moddatestr (11/13/101) def
/modtimestr (15:55:23) def
%%EndPageSetup
column_lines
do_header
5 518 M
(<?xml version="1.0"?>) s
5 502 M
(<Content>) s
5 494 M
(<Topic id="TrainingTheInternet" owner="gkt">) s
5 486 M
(  <Abstract>) s
5 478 M
(    Learn the basics of the Internet.) s
5 470 M
(  </Abstract>) s
5 462 M
(  <Keywords> </Keywords>) s
5 454 M
(  <Requires> missing1</Requires>) s
5 446 M
(  <Uses> </Uses>) s
5 430 M
(  <Outline>) s
5 422 M
(  <Item> How the Internet works </Item>) s
5 414 M
(  <Item> How the internet works </Item>) s
5 406 M
(  <Item> Servers </Item>) s
5 398 M
(  <Item> IP Addresses </Item>) s
5 390 M
(  <Item> Routers </Item>) s
5 382 M
(  <Item> Domain Registration </Item>) s
5 374 M
(  <Item> Nameservers </Item>) s
5 366 M
(  <Item> Whois Records </Item>) s
5 358 M
(  </Outline>) s
5 350 M
(</Topic>) s
5 334 M
(<Topic id="TrainingBasicUnix" owner="gkt">) s
5 326 M
(  <Abstract>) s
5 318 M
(    This topic will cover the basics of working with Unix, focusing on its) s
5 310 M
(    basic organization and usage.) s
5 302 M
(  </Abstract>) s
5 294 M
(  <Keywords> file directory telnet prompt ls cd permissions ) s
5 286 M
(    user group vi emacs) s
5 278 M
(  </Keywords>) s
5 270 M
(  <Requires> missing1 missing2 Routers </Requires>) s
5 262 M
(  <Uses> </Uses>) s
5 246 M
(  <Outline>) s
5 238 M
(  <Item> Directory Structure of our Accounts \(home, www, etc.\) </Item>) s
5 230 M
(  <Item> Working from the Command prompt </Item>) s
5 222 M
(  <Item> Users, Groups and permissions </Item>) s
5 214 M
(  <Item> Text Editors </Item>) s
5 206 M
(  </Outline>) s
5 198 M
(</Topic>) s
5 182 M
(<Topic id="TrainingFTP">) s
5 174 M
(  <Abstract>) s
5 166 M
(    FTP and FTP Clients \(AC\)) s
5 158 M
(  </Abstract>) s
5 150 M
(  <Keywords> ftp telnet missing2 </Keywords>) s
5 142 M
(  <Requires> windows prompt directory file ls cd</Requires>) s
5 134 M
(  <Uses> </Uses>) s
5 118 M
(  <Outline>) s
5 110 M
(  <Item> Basic principle, and general explanation </Item>) s
5 102 M
(  <Item> Default Settings for any FTP Client </Item>) s
5 94 M
(  <Item> Using WS_FTP LE </Item>) s
5 86 M
(  <Item> FTP and Frontpage </Item>) s
5 78 M
(  <Item> Common Errors </Item>) s
5 70 M
(  </Outline>) s
5 62 M
(</Topic>) s
5 46 M
(<Topic id="TrainingEmail">) s
5 38 M
(  <Abstract>) s
5 30 M
(     TrainingEmail? and Email Clients \(AC\)) s
5 22 M
(  </Abstract>) s
5 14 M
(  <Keywords> pop imap addressing </Keywords>) s
5 6 M
(  <Requires> </Requires>) s
377 518 M
(  <Uses> </Uses>) s
377 502 M
(  <Outline>) s
377 494 M
(  <Item> Description of default settings to connect to our servers </Item>) s
377 486 M
(  <Item> Use of Outlook, Outlook Express, Netscape Messenger, Eudora </Item>) s
377 478 M
(  <Item> Site Mail - web based proprietary option </Item>) s
377 470 M
(  <Item> SMTP servers and possible relay errors </Item>) s
377 462 M
(  <Item> Email Aliases and redirect file </Item>) s
377 454 M
(  <Item> Unix Limitation of usernames and workaround </Item>) s
377 446 M
(  <Item> Autoresponders, Infobots </Item>) s
377 438 M
(  <Item> Common Errors </Item>) s
377 430 M
(  </Outline>) s
377 422 M
(</Topic>) s
377 406 M
(<Topic id="TrainingSiteSupport">) s
377 398 M
(  <Abstract>) s
377 390 M
(     TrainingSiteSupport? and Order Processing \(AC\) ) s
377 382 M
(  </Abstract>) s
377 374 M
(  <Keywords> </Keywords>) s
377 366 M
(  <Requires> </Requires>) s
377 358 M
(  <Uses> </Uses>) s
377 342 M
(  <Outline>) s
377 334 M
(  <Item> Checking Incoming and specific boxes </Item>) s
377 326 M
(  <Item> How to leave notes and reply </Item>) s
377 318 M
(  <Item> Using the FAQ list </Item>) s
377 310 M
(  <Item> Moving messages from box to box </Item>) s
377 302 M
(  <Item> Orders Tab in Aegis </Item>) s
377 294 M
(  <Item> Changing Status and loading specific orders </Item>) s
377 286 M
(  <Item> Editing orders </Item>) s
377 278 M
(  </Outline>) s
377 270 M
(</Topic>) s
377 254 M
(<Topic id="TrainingSiteControl">) s
377 246 M
(  <Abstract> </Abstract>) s
377 238 M
(  <Keywords> </Keywords>) s
377 230 M
(  <Requires> missing1 </Requires>) s
377 222 M
(  <Uses> </Uses>) s
377 214 M
(  <Outline>) s
377 206 M
(  <Item> Login procedures </Item>) s
377 198 M
(  <Item> accinfo </Item>) s
377 190 M
(  <Item> Domain Manager </Item>) s
377 182 M
(  <Item> Email Manager </Item>) s
377 174 M
(  <Item> Ecommerce Manager </Item>) s
377 166 M
(  <Item> Billing Manager </Item>) s
377 158 M
(  <Item> Account Manager </Item>) s
377 150 M
(  <Item> Trouble Tickets </Item>) s
377 142 M
(  <Item> scnotify </Item>) s
377 134 M
(  </Outline>) s
377 126 M
(</Topic>) s
377 110 M
(<Topic>) s
377 102 M
(  <Abstract>) s
377 94 M
(     17. TroubleShootingProcedures? ) s
377 78 M
(          Understanding Unix processes ) s
377 70 M
(          Unix S and K scripts and their use \(start, stop, restart\) ) s
377 62 M
(          Checking log files ) s
377 54 M
(  </Abstract>) s
377 46 M
(  <Keywords> </Keywords>) s
377 38 M
(  <Requires> </Requires>) s
377 30 M
(  <Uses> </Uses>) s
377 22 M
(</Topic>) s
377 14 M
(</Content>) s
_R
S
%%Trailer
%%Pages: 5
%%DocumentNeededResources: font Times-Roman Courier-Bold Courier 
%%+ font Times-Bold 
%%EOF
